'use client';
import React, {
  createContext,
  memo,
  useCallback,
  useMemo,
  useState,
} from 'react';
import { UserType } from '@/entities/user';
import { UserProfileHeader } from './user-profile-header';
import { cn } from '@/shared/utils';
import { UserMainInformation } from '@/entities/user/ui/user-main-information/user-main-information';
import { UserVacation } from '@/entities/user/ui/user-vacation/user-vacation';
import { useCountriesStore } from '@/entities/countries/countries.store';

interface UserProfileProps {
  className?: string;
  user: UserType;
  countries?: string[];
}

type TabsType =
  | '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
  | '–û—Ç–ø—É—Å–∫'
  | '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';

const tabs: TabsType[] = [
  '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
  '–û—Ç–ø—É—Å–∫',
  '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
];

export const UserProfile = memo(
  (props: UserProfileProps) => {
    const { className = '', user, countries } = props;

    useCountriesStore.use.setCountries()(countries);

    const [activeTab, setActiveTab] =
      useState<TabsType>('–û—Ç–ø—É—Å–∫');

    const onChangeActiveTab = useCallback(
      (newTab: string) => {
        setActiveTab(newTab as TabsType);
      },
      [],
    );

    const content = useMemo(() => {
      if (activeTab === '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
        return (
          <UserMainInformation
            userMainInformation={
              user['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            }
            userContacts={user['–ö–æ–Ω—Ç–∞–∫—Ç—ã']}
            userDepartments={user['–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ']}
            userUpload={user['–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞']}
            userPersonalInformation={
              user['–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            }
          />
        );
      }
      if (activeTab === '–û—Ç–ø—É—Å–∫') {
        return (
          <UserVacation userVacation={user['–û—Ç–ø—É—Å–∫']} />
        );
      }
      if (activeTab === '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ') {
        return <div>–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ ü§∑‚Äç‚ôÇÔ∏è</div>;
      }
    }, [activeTab, user]);

    return (
      <div className={cn(className, 'flex flex-col gap-4')}>
        <UserProfileHeader
          tabs={tabs}
          currentActiveTab={activeTab}
          setCurrentActiveTab={onChangeActiveTab}
          userMainInformation={user['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']}
        />
        <div>{content}</div>
      </div>
    );
  },
);
